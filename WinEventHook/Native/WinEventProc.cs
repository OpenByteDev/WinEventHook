using System;

namespace WinEventHook {
    /// <summary>
    /// An application-defined callback (or hook) function that the system calls in response to events generated by an accessible object.
    /// The hook function processes the event notifications as required.
    /// Clients install the hook function and request specific types of event notifications by calling SetWinEventHook.
    /// </summary>
    /// <param name="hWinEventHook">Handle to an event hook function. This value is returned by SetWinEventHook when the hook function is installed and is specific to each instance of the hook function.</param>
    /// <param name="eventType">Specifies the event that occurred. </param>
    /// <param name="hwnd">Handle to the window that generates the event, or NULL if no window is associated with the event. For example, the mouse pointer is not associated with a window.</param>
    /// <param name="idObject">Identifies the object associated with the event. This is one of the object identifiers or a custom object ID.</param>
    /// <param name="idChild">Identifies whether the event was triggered by an object or a child element of the object. If this value is CHILDID_SELF, the event was triggered by the object; otherwise, this value is the child ID of the element that triggered the event.</param>
    /// <param name="dwEventThread"></param>
    /// <param name="dwmsEventTime">Specifies the time, in milliseconds, that the event was generated.</param>
    /// <see href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-wineventproc"/>
    public delegate void WinEventProc(
        IntPtr hWinEventHook,
        WindowEvent eventType,
        IntPtr hwnd,
        AccessibleObjectID idObject,
        int idChild,
        uint dwEventThread,
        uint dwmsEventTime);
}
